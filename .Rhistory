Source_Data_2023 <- Source_Data_2023 %>%
mutate(
# Find the index of each 2022 policy number in the 2023 list
index_2022 = match(`Policy No`, policy_numbers_2022),
# Check if each policy number from 2022 is present in 2023
`Present in Prev_Val` = ifelse(is.na(index_2022), "NO", policy_numbers_2022[index_2022]),
# Check if the Start date is on or before the Previous valuation date
`New Policy` = ifelse(`Start Date` > Prev_Val_Date, "YES", "NO"),
#Creating the status2 column
Status_2 = case_when(
`Present in Prev_Val` == "NO" & `New Policy` == "YES" ~ "NEW",
`Present in Prev_Val` == "NO" & `New Policy` != "YES" ~ "MISSING",
TRUE ~ "Present"
),
# New Status column based on the Status column
`New Status` = ifelse(trimws(Status) == "PAID UP", "Paidup", "Inforce"),
# Installment Count based on the Payment Mode
`Installment Count` = case_when(
`Payment Mode` == "M" ~ 12,
`Payment Mode` == "Q" ~ 4,
`Payment Mode` == "H" ~ 2,
TRUE ~ 1
),
# Installment Premium based on Annual Premium and Installment Count
`Installment Premium` = `Annual Premium` / `Installment Count`,
# With Profit column, all entries set to "With Profit"
`With Profit` = "With Profit",
# Revised Sum Assured based on Status
`Revised Sum Assured` = ifelse(Status == "PAID UP", `Paid Up Value`, `Sum Insured`),
# Payable Premium based on Status
`Payable Premium` = ifelse(Status == "PAID UP", 0, `Annual Premium`),
# Checks using a check against a predefined list of policy numbers from 2022
Checks = ifelse(`Policy No` %in% policy_numbers_2022, "Ongoing", "New Policy"),
# New Entries based on Checks
`New Entries` = ifelse(is.na(Checks), "New Policy", "Ongoing"),
# Maturity Year extracted from the Maturity Date
`Maturity Year` = year(`Maturity Date`)
)
View(Source_Data_2022)
View(Source_Data_2023)
library(readxl)
library(dplyr)
library(lubridate)
Source_Data_2022 <- read_excel("C:\\Users\\Robin Ochieng\\OneDrive - Kenbright\\Attachments\\projects\\2024\\August\\Life Automation\\Data\\Source Data.xlsx", sheet = "Source_2022_Data")
Source_Data_2023 <- read_excel("C:\\Users\\Robin Ochieng\\OneDrive - Kenbright\\Attachments\\projects\\2024\\August\\Life Automation\\Data\\Source Data.xlsx", sheet = "Source_2023_Data")
Prev_Val_Date = as.Date("12/31/2022", format = "%m/%d/%Y")
Current_Val_Date = as.Date("12/31/2023", format = "%m/%d/%Y")
# Create a vector of policy numbers from 2022 and 2023 data for fast lookup
policy_numbers_2023 <- Source_Data_2023$`Policy No`
policy_numbers_2022 <- Source_Data_2022$`Policy No`
# Find the index of each 2022 policy number in the 2023 list
index = match(`Policy No`, policy_numbers_2023)
library(readxl)
library(dplyr)
library(lubridate)
Source_Data_2022 <- read_excel("C:\\Users\\Robin Ochieng\\OneDrive - Kenbright\\Attachments\\projects\\2024\\August\\Life Automation\\Data\\Source Data.xlsx", sheet = "Source_2022_Data")
Source_Data_2023 <- read_excel("C:\\Users\\Robin Ochieng\\OneDrive - Kenbright\\Attachments\\projects\\2024\\August\\Life Automation\\Data\\Source Data.xlsx", sheet = "Source_2023_Data")
Prev_Val_Date = as.Date("12/31/2022", format = "%m/%d/%Y")
Current_Val_Date = as.Date("12/31/2023", format = "%m/%d/%Y")
# Create a vector of policy numbers from 2022 and 2023 data for fast lookup
policy_numbers_2023 <- Source_Data_2023$`Policy No`
policy_numbers_2022 <- Source_Data_2022$`Policy No`
# Add new columns to Source_Data_2022
Source_Data_2022 <- Source_Data_2022 %>%
mutate(
# Find the index of each 2022 policy number in the 2023 list
index = match(`Policy No`, policy_numbers_2023),
# Check if each policy number from 2022 is present in 2023
`Present in Current Valuation` = ifelse(is.na(index), "NO", policy_numbers_2023[index]),
# Check if the maturity date is on or before the current valuation date
`Expected Maturity` = ifelse(`Maturity Date` <= Current_Val_Date, "YES", "NO"),
# Determine the status based on the above two checks
`Policy Status` = case_when(
`Present in Current Valuation` == "NO" & `Expected Maturity` == "NO" ~ "Lapse",
`Present in Current Valuation` == "NO" & `Expected Maturity` == "YES" ~ "Maturity",
TRUE ~ "Present in Both"
),
# Check if the policy is active (maturity date after the current valuation date)
Active = `Maturity Date` > Prev_Val_Date
)
# Add new columns to Source_Data_2022
Source_Data_2023 <- Source_Data_2023 %>%
mutate(
# Find the index of each 2022 policy number in the 2023 list
index_2022 = match(`Policy No`, policy_numbers_2022),
# Check if each policy number from 2022 is present in 2023
`Present in Prev_Val` = ifelse(is.na(index_2022), "NO", policy_numbers_2022[index_2022]),
# Check if the Start date is on or before the Previous valuation date
`New Policy` = ifelse(`Start Date` > Prev_Val_Date, "YES", "NO"),
#Creating the status2 column
Status_2 = case_when(
`Present in Prev_Val` == "NO" & `New Policy` == "YES" ~ "NEW",
`Present in Prev_Val` == "NO" & `New Policy` != "YES" ~ "MISSING",
TRUE ~ "Present"
),
# New Status column based on the Status column
`New Status` = ifelse(trimws(Status) == "PAID UP", "Paidup", "Inforce"),
# Installment Count based on the Payment Mode
`Installment Count` = case_when(
`Payment Mode` == "M" ~ 12,
`Payment Mode` == "Q" ~ 4,
`Payment Mode` == "H" ~ 2,
TRUE ~ 1
),
# Installment Premium based on Annual Premium and Installment Count
`Installment Premium` = `Annual Premium` / `Installment Count`,
# With Profit column, all entries set to "With Profit"
`With Profit` = "With Profit",
# Revised Sum Assured based on Status
`Revised Sum Assured` = ifelse(Status == "PAID UP", `Paid Up Value`, `Sum Insured`),
# Payable Premium based on Status
`Payable Premium` = ifelse(Status == "PAID UP", 0, `Annual Premium`),
# Checks using a check against a predefined list of policy numbers from 2022
Checks = ifelse(`Policy No` %in% policy_numbers_2022, "Ongoing", "New Policy"),
# New Entries based on Checks
`New Entries` = ifelse(is.na(Checks), "New Policy", "Ongoing"),
# Maturity Year extracted from the Maturity Date
`Maturity Year` = year(`Maturity Date`)
)
View(Source_Data_2022)
View(Source_Data_2023)
library(readxl)
library(dplyr)
library(lubridate)
Source_Data_2022 <- read_excel("C:\\Users\\Robin Ochieng\\OneDrive - Kenbright\\Attachments\\projects\\2024\\August\\Life Automation\\Data\\Source Data.xlsx", sheet = "Source_2022_Data")
Source_Data_2023 <- read_excel("C:\\Users\\Robin Ochieng\\OneDrive - Kenbright\\Attachments\\projects\\2024\\August\\Life Automation\\Data\\Source Data.xlsx", sheet = "Source_2023_Data")
Prev_Val_Date = as.Date("12/31/2022", format = "%m/%d/%Y")
Current_Val_Date = as.Date("12/31/2023", format = "%m/%d/%Y")
# Create a vector of policy numbers from 2022 and 2023 data for fast lookup
policy_numbers_2023 <- Source_Data_2023$`Policy No`
policy_numbers_2022 <- Source_Data_2022$`Policy No`
# Add new columns to Source_Data_2022
Source_Data_2022 <- Source_Data_2022 %>%
mutate(
# Find the index of each 2022 policy number in the 2023 list
index = match(`Policy No`, policy_numbers_2023),
# Check if each policy number from 2022 is present in 2023
`Present in Current Valuation` = ifelse(is.na(index), "NO", policy_numbers_2023[index]),
# Check if the maturity date is on or before the current valuation date
`Expected Maturity` = ifelse(`Maturity Date` <= Current_Val_Date, "YES", "NO"),
# Determine the status based on the above two checks
`Policy Status` = case_when(
`Present in Current Valuation` == "NO" & `Expected Maturity` == "NO" ~ "Lapse",
`Present in Current Valuation` == "NO" & `Expected Maturity` == "YES" ~ "Maturity",
TRUE ~ "Present in Both"
),
# Check if the policy is active (maturity date after the current valuation date)
Active = `Maturity Date` > Prev_Val_Date
)
# Add new columns to Source_Data_2022
Source_Data_2023 <- Source_Data_2023 %>%
mutate(
# Find the index of each 2022 policy number in the 2023 list
index_2022 = match(`Policy No`, policy_numbers_2022),
# Check if each policy number from 2022 is present in 2023
`Present in Prev_Val` = ifelse(is.na(index_2022), "NO", policy_numbers_2022[index_2022]),
# Check if the Start date is on or before the Previous valuation date
`New Policy` = ifelse(`Start Date` > Prev_Val_Date, "YES", "NO"),
#Creating the status2 column
Status_2 = case_when(
`Present in Prev_Val` == "NO" & `New Policy` == "YES" ~ "NEW",
`Present in Prev_Val` == "NO" & `New Policy` != "YES" ~ "MISSING",
TRUE ~ "Present"
),
# New Status column based on the Status column
`New Status` = ifelse(trimws(Status) == "PAID UP", "Paidup", "Inforce"),
# Installment Count based on the Payment Mode
`Installment Count` = case_when(
`Payment Mode` == "M" ~ 12,
`Payment Mode` == "Q" ~ 4,
`Payment Mode` == "H" ~ 2,
TRUE ~ 1
),
# Installment Premium based on Annual Premium and Installment Count
`Installment Premium` = `Annual Premium` / `Installment Count`,
# With Profit column, all entries set to "With Profit"
`With Profit` = "With Profit",
# Revised Sum Assured based on Status
`Revised Sum Assured` = ifelse(Status == "PAID UP", `Paid Up Value`, `Sum Insured`),
# Payable Premium based on Status
`Payable Premium` = ifelse(Status == "PAID UP", 0, `Annual Premium`),
# Checks using a check against a predefined list of policy numbers from 2022
Checks = ifelse(`Policy No` %in% policy_numbers_2022, as.character(`Policy No`), "New Policy"),
# New Entries based on Checks
`New Entries` = ifelse(is.na(Checks), "New Policy", "Ongoing"),
# Maturity Year extracted from the Maturity Date
`Maturity Year` = year(`Maturity Date`)
)
View(Source_Data_2022)
View(Source_Data_2023)
library(readxl)
library(dplyr)
library(lubridate)
Source_Data_2022 <- read_excel("C:\\Users\\Robin Ochieng\\OneDrive - Kenbright\\Attachments\\projects\\2024\\August\\Life Automation\\Data\\Source Data.xlsx", sheet = "Source_2022_Data")
Source_Data_2023 <- read_excel("C:\\Users\\Robin Ochieng\\OneDrive - Kenbright\\Attachments\\projects\\2024\\August\\Life Automation\\Data\\Source Data.xlsx", sheet = "Source_2023_Data")
Prev_Val_Date = as.Date("12/31/2022", format = "%m/%d/%Y")
Current_Val_Date = as.Date("12/31/2023", format = "%m/%d/%Y")
# Create a vector of policy numbers from 2022 and 2023 data for fast lookup
policy_numbers_2023 <- Source_Data_2023$`Policy No`
policy_numbers_2022 <- Source_Data_2022$`Policy No`
# Add new columns to Source_Data_2022
Source_Data_2022 <- Source_Data_2022 %>%
mutate(
# Find the index of each 2022 policy number in the 2023 list
index = match(`Policy No`, policy_numbers_2023),
# Check if each policy number from 2022 is present in 2023
`Present in Current Valuation` = ifelse(is.na(index), "NO", policy_numbers_2023[index]),
# Check if the maturity date is on or before the current valuation date
`Expected Maturity` = ifelse(`Maturity Date` <= Current_Val_Date, "YES", "NO"),
# Determine the status based on the above two checks
`Policy Status` = case_when(
`Present in Current Valuation` == "NO" & `Expected Maturity` == "NO" ~ "Lapse",
`Present in Current Valuation` == "NO" & `Expected Maturity` == "YES" ~ "Maturity",
TRUE ~ "Present in Both"
),
# Check if the policy is active (maturity date after the current valuation date)
Active = `Maturity Date` > Prev_Val_Date
)
# Add new columns to Source_Data_2022
Source_Data_2023 <- Source_Data_2023 %>%
mutate(
# Find the index of each 2022 policy number in the 2023 list
index_2022 = match(`Policy No`, policy_numbers_2022),
# Check if each policy number from 2022 is present in 2023
`Present in Prev_Val` = ifelse(is.na(index_2022), "NO", policy_numbers_2022[index_2022]),
# Check if the Start date is on or before the Previous valuation date
`New Policy` = ifelse(`Start Date` > Prev_Val_Date, "YES", "NO"),
#Creating the status2 column
Status_2 = case_when(
`Present in Prev_Val` == "NO" & `New Policy` == "YES" ~ "NEW",
`Present in Prev_Val` == "NO" & `New Policy` != "YES" ~ "MISSING",
TRUE ~ "Present"
),
# New Status column based on the Status column
`New Status` = ifelse(trimws(Status) == "PAID UP", "Paidup", "Inforce"),
# Installment Count based on the Payment Mode
`Installment Count` = case_when(
`Payment Mode` == "M" ~ 12,
`Payment Mode` == "Q" ~ 4,
`Payment Mode` == "H" ~ 2,
TRUE ~ 1
),
# Installment Premium based on Annual Premium and Installment Count
`Installment Premium` = `Annual Premium` / `Installment Count`,
# With Profit column, all entries set to "With Profit"
`With Profit` = "With Profit",
# Revised Sum Assured based on Status
`Revised Sum Assured` = ifelse(Status == "PAID UP", `Paid Up Value`, `Sum Insured`),
# Payable Premium based on Status
`Payable Premium` = ifelse(Status == "PAID UP", 0, `Annual Premium`),
# Checks using a check against a predefined list of policy numbers from 2022
Checks = ifelse(`Policy No` %in% policy_numbers_2022, as.character(`Policy No`), "New Policy"),
# New Entries based on Checks
`New Entries` = ifelse(Checks != "New Policy", "Ongoing", "New Policy"),
# Maturity Year extracted from the Maturity Date
`Maturity Year` = year(`Maturity Date`)
)
View(Source_Data_2022)
View(Source_Data_2023)
names(Source_Data_2022)
table(Source_Data_2022$`Plan Name`)
table(Source_Data_2022$`Policy Status`)
library(readxl)
library(dplyr)
library(lubridate)
library(tidyverse)
# Sample summarization and pivot table creation
summary_table <- Source_Data_2022 %>%
group_by(`Plan Name`, `Policy Status`) %>%
summarise(Count = n(), .groups = 'drop') %>%
pivot_wider(names_from = `Policy Status`, values_from = Count, values_fill = list(Count = 0)) %>%
rowwise() %>%
mutate(`Grand Total` = sum(c_across(Lapse:Maturity:Present in Both), na.rm = TRUE))
# Summarization and pivot table creation
summary_table <- Source_Data_2022 %>%
group_by(`Plan Name`, `Policy Status`) %>%
summarise(Count = n(), .groups = 'drop') %>%
pivot_wider(names_from = `Policy Status`, values_from = Count, values_fill = list(Count = 0)) %>%
rowwise() %>%
mutate(`Grand Total` = sum(c_across(c(Lapse, Maturity, `Present in Both`)), na.rm = TRUE))
# View the resulting table
print(summary_table)
# Optionally, add a grand total row
grand_totals <- summary_table %>%
summarise(across(Lapse:`Grand Total`, sum, na.rm = TRUE), .groups = 'drop')
# Combine with the main table
final_table <- bind_rows(summary_table, grand_totals)
# Print the final table with grand totals
print(final_table)
# Summarization and pivot table creation
summary_table_2023 <- Source_Data_2023 %>%
group_by(`Plan Name`, `Status_2`) %>%
summarise(Count = n(), .groups = 'drop') %>%
pivot_wider(names_from = `Policy Status`, values_from = Count, values_fill = list(Count = 0)) %>%
rowwise() %>%
mutate(`Grand Total` = sum(c_across(c(MISSING, Present)), na.rm = TRUE))
# Summarization and pivot table creation
summary_table_2023 <- Source_Data_2023 %>%
group_by(`Plan Name`, `Status_2`) %>%
summarise(Count = n(), .groups = 'drop') %>%
pivot_wider(names_from = Status_2, values_from = Count, values_fill = list(Count = 0)) %>%
rowwise() %>%
mutate(`Grand Total` = sum(c_across(c(MISSING, Present)), na.rm = TRUE))
# View the resulting table
print(summary_table_2023)
# Grouping and summarizing the data
aggregated_data <- summary_table_2023 %>%
group_by(`Plan Name`, `Maturity Year`) %>%
summarise(
`Count of Policy No` = n(),
`Sum of Revised Sum Assured` = sum(`Revised Sum Assured`, na.rm = TRUE),
`Sum of Payable Premium` = sum(`Payable Premium`, na.rm = TRUE),
.groups = 'drop')
names(Source_Data_2023)
aggregated_data <- summary_table_2023 %>%
group_by(`Plan Name`, `Maturity Year`)
# Grouping and summarizing the data
aggregated_data <- Source_Data_2023 %>%
group_by(`Plan Name`, `Maturity Year`) %>%
summarise(
`Count of Policy No` = n(),
`Sum of Revised Sum Assured` = sum(`Revised Sum Assured`, na.rm = TRUE),
`Sum of Payable Premium` = sum(`Payable Premium`, na.rm = TRUE),
.groups = 'drop')
# View the aggregated data
print(aggregated_data)
# View the aggregated data
View(aggregated_data)
# Add new columns to Source_Data_2022
Source_Data_2023 <- Source_Data_2023 %>%
mutate(
# Find the index of each 2022 policy number in the 2023 list
index_2022 = match(`Policy No`, policy_numbers_2022),
# Check if each policy number from 2022 is present in 2023
`Present in Prev_Val` = ifelse(is.na(index_2022), "NO", policy_numbers_2022[index_2022]),
# Check if the Start date is on or before the Previous valuation date
`New Policy` = ifelse(`Start Date` > Prev_Val_Date, "YES", "NO"),
#Creating the status2 column
Status_2 = case_when(
`Present in Prev_Val` == "NO" & `New Policy` == "YES" ~ "NEW",
`Present in Prev_Val` == "NO" & `New Policy` != "YES" ~ "MISSING",
TRUE ~ "Present"
),
# New Status column based on the Status column
`New Status` = ifelse(trimws(Status) == "PAID UP", "Paidup", "Inforce"),
# Installment Count based on the Payment Mode
`Installment Count` = case_when(
`Payment Mode` == "M" ~ 12,
`Payment Mode` == "Q" ~ 4,
`Payment Mode` == "H" ~ 2,
TRUE ~ 1
),
# Installment Premium based on Annual Premium and Installment Count
`Installment Premium` = `Annual Premium` / `Installment Count`,
# With Profit column, all entries set to "With Profit"
`With Profit` = "With Profit",
# Revised Sum Assured based on Status
`Revised Sum Assured` = ifelse(Status == "PAID UP", `Paid Up Value`, `Sum Insured`),
# Payable Premium based on Status
`Payable Premium` = ifelse(Status == "PAID UP", 0, `Annual Premium`),
# Checks using a check against a predefined list of policy numbers from 2022
Checks = ifelse(`Policy No` %in% policy_numbers_2022, as.character(`Policy No`), "New Policy"),
# New Entries based on Checks
`New Entries` = ifelse(Checks != "New Policy", "Ongoing", "New Policy"),
`Revised Maturity Date` = `Start Date` %m+% months(12 * `Policy Term`),
# Maturity Year extracted from the Maturity Date
`Maturity Year` = year(`Revised Maturity Date`)
)
View(Source_Data_2023)
# Generate summaries for each plan
list_of_plans <- unique(aggregated_data$`Plan Name`)
plan_summaries <- lapply(list_of_plans, function(plan_name) {
plan_data <- aggregated_data %>%
filter(`Plan Name` == plan_name) %>%
group_by(`Maturity Year`) %>%
summarise(
Number = sum(`Number`), # Assuming this is the count of policies
`Sum Assured` = sum(`Sum Assured`),
`Office Premium` = sum(`Office Premium`)
) %>%
ungroup() %>%
arrange(`Maturity Year`) %>%
bind_rows(
summarise(., `Maturity Year` = "Grand Total",
Number = sum(Number),
`Sum Assured` = sum(`Sum Assured`),
`Office Premium` = sum(`Office Premium`))
)
# Return as a dataframe with the plan name as an additional column
data.frame(`Plan Name` = plan_name, plan_data)
})
names(aggregated_data)
plan_summaries <- lapply(list_of_plans, function(plan_name) {
plan_data <- aggregated_data %>%
filter(`Plan Name` == plan_name) %>%
group_by(`Maturity Year`) %>%
summarise(
Number = sum(`Count of Policy No`), # Assuming this is the count of policies
`Sum Assured` = sum(`Sum Assured`),
`Office Premium` = sum(`Office Premium`)
) %>%
ungroup() %>%
arrange(`Maturity Year`) %>%
bind_rows(
summarise(., `Maturity Year` = "Grand Total",
Number = sum(`Count of Policy No`),
`Sum Assured` = sum(`Sum Assured`),
`Office Premium` = sum(`Office Premium`))
)
# Return as a dataframe with the plan name as an additional column
data.frame(`Plan Name` = plan_name, plan_data)
})
plan_summaries <- lapply(list_of_plans, function(plan_name) {
plan_data <- aggregated_data %>%
filter(`Plan Name` == plan_name) %>%
group_by(`Maturity Year`) %>%
summarise(
Number = sum(`Count of Policy No`), # Assuming this is the count of policies
`Sum Assured` = sum(`Sum of Revised Sum Assured`),
`Office Premium` = sum(`Sum of Payable Premium`)
) %>%
ungroup() %>%
arrange(`Maturity Year`) %>%
bind_rows(
summarise(., `Maturity Year` = "Grand Total",
Number = sum(`Count of Policy No`),
`Sum Assured` = sum(`Sum of Revised Sum Assured`),
`Office Premium` = sum(`Sum of Payable Premium`))
)
# Return as a dataframe with the plan name as an additional column
data.frame(`Plan Name` = plan_name, plan_data)
})
plan_summaries <- lapply(list_of_plans, function(plan_name) {
plan_data <- aggregated_data %>%
filter(`Plan Name` == plan_name) %>%
group_by(`Maturity Year`) %>%
summarise(
Number = sum(`Count of Policy No`), # Assuming this is the count of policies
`Sum Assured` = sum(`Sum of Revised Sum Assured`),
`Office Premium` = sum(`Sum of Payable Premium`)
) %>%
ungroup() %>%
arrange(`Maturity Year`) %>%
bind_rows(
summarise(., `Maturity Year` = "Grand Total",
Number = sum(Number),
`Sum Assured` = sum(`Sum Assured`),
`Office Premium` = sum(`Office Premium`))
)
# Return as a dataframe with the plan name as an additional column
data.frame(`Plan Name` = plan_name, plan_data)
})
# Generate summaries for each plan
list_of_plans <- unique(summary_table_2023$`Plan Name`)
plan_summaries <- lapply(list_of_plans, function(plan_name) {
plan_data <- summary_table_2023 %>%
filter(`Plan Name` == plan_name) %>%
group_by(`Maturity Year`) %>%
summarise(
Number = sum(`Count of Policy No`), # Assuming this is the count of policies
`Sum Assured` = sum(`Sum of Revised Sum Assured`),
`Office Premium` = sum(`Sum of Payable Premium`)
) %>%
arrange(`Maturity Year`)
# Return as a dataframe with the plan name as an additional column
data.frame(`Plan Name` = plan_name, plan_data)
})
# Generate summaries for each plan
list_of_plans <- unique(aggregated_data$`Plan Name`)
plan_summaries <- lapply(list_of_plans, function(plan_name) {
plan_data <- aggregated_data %>%
filter(`Plan Name` == plan_name) %>%
group_by(`Maturity Year`) %>%
summarise(
Number = sum(`Count of Policy No`), # Assuming this is the count of policies
`Sum Assured` = sum(`Sum of Revised Sum Assured`),
`Office Premium` = sum(`Sum of Payable Premium`)
) %>%
arrange(`Maturity Year`)
# Return as a dataframe with the plan name as an additional column
data.frame(`Plan Name` = plan_name, plan_data)
})
# Combine all plan summaries into one dataframe
final_summary <- bind_rows(plan_summaries)
final_summary
View(final_summary)
library(shiny); runApp('SalesDashboard.R')
runApp('SalesDashboard.R')
runApp('SalesDashboard.R')
runApp('SalesDashboard.R')
runApp('SalesDashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard - Modules/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard - Modules/sales_dashboard - Quarters Test.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard - Modules/sales_dashboard - Quarters Test.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard - Modules/sales_dashboard - Quarters Test.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
runApp('C:/Users/Robin Ochieng/Kenbright/KAFS Shinny Apps Models - General/SalesDashboard/sales_dashboard.R')
